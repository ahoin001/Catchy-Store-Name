{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/cart/cart-icon/cart-icon.jsx\";\nimport React from 'react';\nimport fp from 'lodash';\nimport { createSelector } from 'reselect';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getTotalItems } from '../../../redux/cart-dropdown/selectors/cart-items';\nimport { toggleCartDisplay } from '../../../redux/cart-dropdown/cart-dropdown-actions';\nimport { ReactComponent as ShoppingCartIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/shoppingbag.svg\";\nimport './cart-icon.scss';\n\nconst CartIcon = () => {\n  let words = ['sky', 'wood', 'forest', 'falcon', 'pear', 'ocean', 'universe'];\n\n  let fel = _.first(words);\n\n  let lel = _.last(words);\n\n  console.log(`First element: ${fel}`);\n  console.log(`Last element: ${lel}`);\n  const totalItems = useSelector(state => {\n    return getTotalItems(state);\n  });\n  const dispatch = useDispatch();\n  console.log(\"SnackList rendering\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-icon\" // Changes state being used somewheree else so does not cause rerender of cart icon\n    ,\n    onClick: () => dispatch(toggleCartDisplay()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ShoppingCartIcon, {\n    className: \"shopping-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"item-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, totalItems));\n}; // dispatch provided by connect\n\n\nconst mapDispatchToProps = dispatch => {\n  // ? this object will be spread to props\n  return {\n    // ? Dispatch excecutes action creator function with user argument and returns the action object for dispatch excecution\n    toggleCartDropDown: () => dispatch(toggleCartDisplay())\n  };\n}; // ? Deconstruct to get nested property value from state object recieved by connect\n// const mapStateToProps = ({ cartDropDown: { cartItems } }) => {\n//     console.log(`I HAVE BEEN CALLED`)\n//     return {\n//         totalItems: cartItems.reduce((accumulator, currentValue) => {\n//             return accumulator + currentValue.quantity\n//         }, 0)\n//     }\n// }\n// const totalItems = useSelector(getTotalItems)\n// const totalItems = useSelector(({ cartDropDown: { cartItems } }) => {\n//     cartItems.reduce((accumulator, currentValue) => {\n//         return accumulator + currentValue.quantity\n//     }, 0)\n// })\n\n\nexport default CartIcon;","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/cart/cart-icon/cart-icon.jsx"],"names":["React","fp","createSelector","connect","useSelector","useDispatch","getTotalItems","toggleCartDisplay","CartIcon","words","fel","_","first","lel","last","console","log","totalItems","state","dispatch","mapDispatchToProps","toggleCartDropDown"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,EAAP,MAAe,QAAf;AACA,SAASC,cAAT,QAA+B,UAA/B;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,iBAAT,QAAkC,oDAAlC;;AAIA,OAAO,kBAAP;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAEnB,MAAIC,KAAK,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,QAA1B,EACR,MADQ,EACA,OADA,EACS,UADT,CAAZ;;AAGA,MAAIC,GAAG,GAAGC,CAAC,CAACC,KAAF,CAAQH,KAAR,CAAV;;AACA,MAAII,GAAG,GAAGF,CAAC,CAACG,IAAF,CAAOL,KAAP,CAAV;;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBN,GAAI,EAAlC;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBH,GAAI,EAAjC;AAEA,QAAMI,UAAU,GAAGb,WAAW,CAAEc,KAAD,IAAW;AAAE,WAAOZ,aAAa,CAACY,KAAD,CAApB;AAA6B,GAA3C,CAA9B;AAEA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEAU,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAGA,sBAGI;AACI,IAAA,SAAS,EAAC,WADd,CAEI;AAFJ;AAGI,IAAA,OAAO,EAAE,MAAMG,QAAQ,CAACZ,iBAAiB,EAAlB,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,gBAAD;AAAkB,IAAA,SAAS,EAAC,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAOI;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BU,UAA9B,CAPJ,CAHJ;AAeH,CAjCD,C,CAmCA;;;AACA,MAAMG,kBAAkB,GAAGD,QAAQ,IAAI;AAEnC;AACA,SAAO;AAEH;AACAE,IAAAA,kBAAkB,EAAE,MAAMF,QAAQ,CAACZ,iBAAiB,EAAlB;AAH/B,GAAP;AAMH,CATD,C,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,eAAeC,QAAf","sourcesContent":["import React from 'react';\n\nimport fp from 'lodash'\nimport { createSelector } from 'reselect'\nimport { connect, useSelector, useDispatch } from 'react-redux'\nimport { getTotalItems } from '../../../redux/cart-dropdown/selectors/cart-items'\nimport { toggleCartDisplay } from '../../../redux/cart-dropdown/cart-dropdown-actions'\n\nimport { ReactComponent as ShoppingCartIcon } from \"../../../assets/shoppingbag.svg\";\n\nimport './cart-icon.scss'\n\nconst CartIcon = () => {\n\n    let words = ['sky', 'wood', 'forest', 'falcon',\n        'pear', 'ocean', 'universe'];\n\n    let fel = _.first(words);\n    let lel = _.last(words);\n\n    console.log(`First element: ${fel}`);\n    console.log(`Last element: ${lel}`);\n\n    const totalItems = useSelector((state) => { return getTotalItems(state) })\n\n    const dispatch = useDispatch()\n\n    console.log(\"SnackList rendering\");\n\n\n    return (\n\n\n        <div\n            className=\"cart-icon\"\n            // Changes state being used somewheree else so does not cause rerender of cart icon\n            onClick={() => dispatch(toggleCartDisplay())}\n        >\n\n            <ShoppingCartIcon className=\"shopping-icon\" />\n            <span className=\"item-count\">{totalItems}</span>\n\n        </div>\n    );\n\n};\n\n// dispatch provided by connect\nconst mapDispatchToProps = dispatch => {\n\n    // ? this object will be spread to props\n    return {\n\n        // ? Dispatch excecutes action creator function with user argument and returns the action object for dispatch excecution\n        toggleCartDropDown: () => dispatch(toggleCartDisplay())\n\n    }\n}\n\n// ? Deconstruct to get nested property value from state object recieved by connect\n// const mapStateToProps = ({ cartDropDown: { cartItems } }) => {\n//     console.log(`I HAVE BEEN CALLED`)\n//     return {\n//         totalItems: cartItems.reduce((accumulator, currentValue) => {\n//             return accumulator + currentValue.quantity\n//         }, 0)\n//     }\n\n// }\n\n// const totalItems = useSelector(getTotalItems)\n\n// const totalItems = useSelector(({ cartDropDown: { cartItems } }) => {\n//     cartItems.reduce((accumulator, currentValue) => {\n//         return accumulator + currentValue.quantity\n//     }, 0)\n// })\n\nexport default CartIcon;    "]},"metadata":{},"sourceType":"module"}