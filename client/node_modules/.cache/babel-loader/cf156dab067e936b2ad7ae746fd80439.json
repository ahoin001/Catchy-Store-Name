{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/pages/shop/Shop.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { firestore, convertCollectionSnapShotToMap } from '../../components/config/firebase/firebase-util';\nimport { updateCollections } from '../../redux/shop/shop-actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner';\nimport CollectionPage from '../collection/collection';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview';\nimport './shop.scss';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage); // ? Shop component is nested in a route (check App.js) Route passes map, location and history props\n\nconst Shop = ({\n  match\n}) => {\n  const [displayLoaingSpinner, setdisplayLoaingSpinner] = useState(true);\n  const dispatch = useDispatch();\n  const updateCollectionsAction = React.useCallback(collection => dispatch(updateCollections(collection)), [dispatch]); // ? Hit Firebase to make sure Firebase Collection gives us most recent store collection inventory \n\n  useEffect(() => {\n    let unsubscribeFromSnapShot;\n\n    const getShopData = () => {\n      unsubscribeFromSnapShot = null;\n      const collectionRef = firestore.collection('collections');\n      collectionRef.get().then(snapshot => {\n        const collectionsMap = convertCollectionSnapShotToMap(snapshot); // console.log('MAPPED OBJECT %%%%%%%%',collectionsMap)\n\n        updateCollectionsAction(collectionsMap);\n        setdisplayLoaingSpinner(false);\n      }); // ? Whenever collection updates or is initialized , return snapshot object of collectionRef\n      // unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapshot => {\n      //     const collectionsMap = convertCollectionSnapShotToMap(snapshot)\n      //     // console.log('MAPPED OBJECT %%%%%%%%',collectionsMap)\n      //     updateCollectionsAction(collectionsMap)\n      //     setdisplayLoaingSpinner(false)\n      // })\n    };\n\n    getShopData();\n    return () => {\n      unsubscribeFromSnapShot();\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: 'shop-page',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n      isLoading: displayLoaingSpinner\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 36\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: `${match.path}/:collectionId`,\n    render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n      isLoading: displayLoaingSpinner\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 36\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Shop;","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/pages/shop/Shop.jsx"],"names":["React","useEffect","useState","Route","useDispatch","firestore","convertCollectionSnapShotToMap","updateCollections","WithSpinner","CollectionPage","CollectionsOverview","CollectionOverviewWithSpinner","CollectionPageWithSpinner","Shop","match","displayLoaingSpinner","setdisplayLoaingSpinner","dispatch","updateCollectionsAction","useCallback","collection","unsubscribeFromSnapShot","getShopData","collectionRef","get","then","snapshot","collectionsMap","path","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,gDAA1D;AAEA,SAASC,iBAAT,QAAkC,+BAAlC;AAEA,OAAOC,WAAP,MAAwB,4CAAxB;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,mBAAP,MAAgC,4DAAhC;AAEA,OAAO,aAAP;AAEA,MAAMC,6BAA6B,GAAGH,WAAW,CAACE,mBAAD,CAAjD;AACA,MAAME,yBAAyB,GAAGJ,WAAW,CAACC,cAAD,CAA7C,C,CAIA;;AACA,MAAMI,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAExB,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDd,QAAQ,CAAC,IAAD,CAAhE;AAEA,QAAMe,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,uBAAuB,GAAGlB,KAAK,CAACmB,WAAN,CAC3BC,UAAD,IAAgBH,QAAQ,CAACV,iBAAiB,CAACa,UAAD,CAAlB,CADI,EAE5B,CAACH,QAAD,CAF4B,CAAhC,CALwB,CAUxB;;AACAhB,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIoB,uBAAJ;;AAEA,UAAMC,WAAW,GAAG,MAAM;AAEtBD,MAAAA,uBAAuB,GAAG,IAA1B;AAEA,YAAME,aAAa,GAAGlB,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AAEAG,MAAAA,aAAa,CAACC,GAAd,GACKC,IADL,CACUC,QAAQ,IAAI;AAEd,cAAMC,cAAc,GAAGrB,8BAA8B,CAACoB,QAAD,CAArD,CAFc,CAGd;;AACAR,QAAAA,uBAAuB,CAACS,cAAD,CAAvB;AACAX,QAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACH,OAPL,EANsB,CAetB;AACA;AAEA;AACA;AACA;AACA;AACA;AAEH,KAxBD;;AA0BAM,IAAAA,WAAW;AAEX,WAAO,MAAM;AACTD,MAAAA,uBAAuB;AAC1B,KAFD;AAIH,GApCQ,EAoCN,EApCM,CAAT;AAwCA,sBAEI;AAAK,IAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,KAAD;AACI,IAAA,KAAK,MADT;AAEI,IAAA,IAAI,EAAG,GAAEP,KAAK,CAACc,IAAK,EAFxB;AAGI,IAAA,MAAM,EAAGC,KAAD,iBAAW,oBAAC,6BAAD;AAA+B,MAAA,SAAS,EAAEd;AAA1C,OAAoEc,KAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAUI,oBAAC,KAAD;AACI,IAAA,IAAI,EAAG,GAAEf,KAAK,CAACc,IAAK,gBADxB;AAEI,IAAA,MAAM,EAAGC,KAAD,iBAAW,oBAAC,yBAAD;AAA2B,MAAA,SAAS,EAAEd;AAAtC,OAAgEc,KAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVJ,CAFJ;AAqBH,CAxED;;AA0EA,eAAehB,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { firestore, convertCollectionSnapShotToMap } from '../../components/config/firebase/firebase-util'\n\nimport { updateCollections } from '../../redux/shop/shop-actions'\n\nimport WithSpinner from '../../components/with-spinner/with-spinner'\nimport CollectionPage from '../collection/collection'\nimport CollectionsOverview from '../../components/collections-overview/collections-overview';\n\nimport './shop.scss'\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n\n\n// ? Shop component is nested in a route (check App.js) Route passes map, location and history props\nconst Shop = ({ match }) => {\n\n    const [displayLoaingSpinner, setdisplayLoaingSpinner] = useState(true)\n\n    const dispatch = useDispatch();\n    const updateCollectionsAction = React.useCallback(\n        (collection) => dispatch(updateCollections(collection)),\n        [dispatch]\n    )\n\n    // ? Hit Firebase to make sure Firebase Collection gives us most recent store collection inventory \n    useEffect(() => {\n\n        let unsubscribeFromSnapShot;\n\n        const getShopData = () => {\n\n            unsubscribeFromSnapShot = null;\n\n            const collectionRef = firestore.collection('collections')\n\n            collectionRef.get()\n                .then(snapshot => {\n\n                    const collectionsMap = convertCollectionSnapShotToMap(snapshot)\n                    // console.log('MAPPED OBJECT %%%%%%%%',collectionsMap)\n                    updateCollectionsAction(collectionsMap)\n                    setdisplayLoaingSpinner(false)\n                })\n\n            // ? Whenever collection updates or is initialized , return snapshot object of collectionRef\n            // unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapshot => {\n\n            //     const collectionsMap = convertCollectionSnapShotToMap(snapshot)\n            //     // console.log('MAPPED OBJECT %%%%%%%%',collectionsMap)\n            //     updateCollectionsAction(collectionsMap)\n            //     setdisplayLoaingSpinner(false)\n            // })\n\n        }\n\n        getShopData();\n\n        return () => {\n            unsubscribeFromSnapShot()\n        }\n\n    }, [])\n\n\n\n    return (\n\n        <div className={'shop-page'}>\n\n            {/* Match path will be current nested components route, so /shop */}\n            {/* Render accepts function that I use to pass props and a component */}\n            <Route\n                exact\n                path={`${match.path}`}\n                render={(props) => <CollectionOverviewWithSpinner isLoading={displayLoaingSpinner} {...props} />}\n            />\n\n            <Route\n                path={`${match.path}/:collectionId`}\n                render={(props) => <CollectionPageWithSpinner isLoading={displayLoaingSpinner} {...props} />}\n            />\n\n        </div>\n    );\n\n\n};\n\nexport default Shop;"]},"metadata":{},"sourceType":"module"}