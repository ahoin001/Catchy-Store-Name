{"ast":null,"code":"// ! Reducers should not mutate state, but return a value of mutated state instead\n// Will hold all reducers we imported, to avoid one massive file\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\"; // Gets local storage from browser\n\nimport storage from \"redux-persist/lib/storage\";\nimport userReducer from './user/user-reducer';\nimport cartDropDownReducer from './cart-dropdown/cart-dropdown-reducer';\nimport directoryReducer from './directory//directory-reducer';\nconst persistConfig = {\n  key: 'root',\n  storage,\n  // Contains name of reducers to store\n  whiteList: ['cartDropDown']\n}; // * WHEN STATE IS MODIFIED IN THE REDUCERS THE MODIFIED STATE IS RETURNED TO THE STORE\n// * NEVER MODIFY STATE DIRECTLY\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  cartDropDown: cartDropDownReducer,\n  directory: directoryReducer\n}); // ? Modified version of root reducer with persistance capabilities\n\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/redux/root-reducer.js"],"names":["combineReducers","persistReducer","storage","userReducer","cartDropDownReducer","directoryReducer","persistConfig","key","whiteList","rootReducer","user","cartDropDown","directory"],"mappings":"AAAA;AAEA;AACA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAIA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBL,EAAAA,OAFkB;AAIlB;AACAM,EAAAA,SAAS,EAAE,CAAC,cAAD;AALO,CAAtB,C,CASA;AACA;;AACA,MAAMC,WAAW,GAAGT,eAAe,CAC/B;AACIU,EAAAA,IAAI,EAAEP,WADV;AAEIQ,EAAAA,YAAY,EAAEP,mBAFlB;AAGIQ,EAAAA,SAAS,EAAEP;AAHf,CAD+B,CAAnC,C,CAQA;;AACA,eAAeJ,cAAc,CAACK,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["// ! Reducers should not mutate state, but return a value of mutated state instead\n\n// Will hold all reducers we imported, to avoid one massive file\nimport { combineReducers } from \"redux\";\nimport { persistReducer } from \"redux-persist\";\n\n// Gets local storage from browser\nimport storage from \"redux-persist/lib/storage\";\n\nimport userReducer from './user/user-reducer'\nimport cartDropDownReducer from './cart-dropdown/cart-dropdown-reducer'\nimport directoryReducer from './directory//directory-reducer'\n\n\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n\n    // Contains name of reducers to store\n    whiteList: ['cartDropDown']\n}\n\n\n// * WHEN STATE IS MODIFIED IN THE REDUCERS THE MODIFIED STATE IS RETURNED TO THE STORE\n// * NEVER MODIFY STATE DIRECTLY\nconst rootReducer = combineReducers(\n    {\n        user: userReducer,\n        cartDropDown: cartDropDownReducer,\n        directory: directoryReducer\n    }\n)\n\n// ? Modified version of root reducer with persistance capabilities\nexport default persistReducer(persistConfig, rootReducer)"]},"metadata":{},"sourceType":"module"}