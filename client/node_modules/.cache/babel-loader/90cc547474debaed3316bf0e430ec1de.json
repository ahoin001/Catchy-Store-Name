{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user-types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../components/config/firebase/firebase-util';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from './user-actions';\nexport function* signInWithGoogle() {\n  try {\n    // ? Extract user object from auth object \n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    console.log(`###### `, user);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapShot = yield userRef.get();\n    console.log(`Snapshot :`, userSnapShot);\n    const l = { ...userSnapShot.data()\n    };\n    console.log(l); // ? Use user Data to create action with user Object as payload\n    // ? put sends return object back to redux flow\n\n    yield put(googleSignInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // ? Extract user object from auth object \n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapShot = yield userRef.get();\n    console.log(`Snapshot :`, userSnapShot);\n    const l = { ...userSnapShot.data()\n    };\n    console.log(l); // ? Use user Data to create action with user Object as payload\n    // ? put sends return object back to redux flow\n\n    yield put(emailSignInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n} // ? Export Sagas to root rootSaga\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","user","signInWithPopup","console","log","userRef","userSnapShot","get","l","data","id","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,gDAAhE;AAEA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,kBAHJ,EAIIC,kBAJJ,QAKO,gBALP;AAOA,OAAO,UAAUC,gBAAV,GAA6B;AAEhC,MAAI;AAEA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACS,eAAL,CAAqBR,cAArB,CAAvB;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAb,EAAuBH,IAAvB;AAEA,UAAMI,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMK,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA0BE,YAA1B;AACA,UAAME,CAAC,GAAG,EAAE,GAAGF,YAAY,CAACG,IAAb;AAAL,KAAV;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ,EAVA,CAWA;AACA;;AACA,UAAMnB,GAAG,CAACO,mBAAmB,CAAC;AAC1Bc,MAAAA,EAAE,EAAEJ,YAAY,CAACI,EADS;AAE1B,SAAGJ,YAAY,CAACG,IAAb;AAFuB,KAAD,CAApB,CAAT;AAKH,GAlBD,CAkBE,OAAOE,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACQ,mBAAmB,CAACc,KAAD,CAApB,CAAT;AACH;AAEJ;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMxB,UAAU,CAACI,eAAe,CAACqB,oBAAjB,EAAuCb,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUc,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAE/D,MAAI;AAEA;AACA,UAAM;AAAEhB,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACyB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAAvB;AAEA,UAAMZ,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B;AACA,UAAMK,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAb,EAA0BE,YAA1B;AACA,UAAME,CAAC,GAAG,EAAE,GAAGF,YAAY,CAACG,IAAb;AAAL,KAAV;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ,EATA,CAUA;AACA;;AACA,UAAMnB,GAAG,CAACS,kBAAkB,CAAC;AACzBY,MAAAA,EAAE,EAAEJ,YAAY,CAACI,EADQ;AAEzB,SAAGJ,YAAY,CAACG,IAAb;AAFsB,KAAD,CAAnB,CAAT;AAMH,GAlBD,CAkBE,OAAOE,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACU,kBAAkB,CAACY,KAAD,CAAnB,CAAT;AACH;AAEJ;AAED,OAAO,UAAUQ,kBAAV,GAA+B;AAClC,QAAM/B,UAAU,CAACI,eAAe,CAAC4B,mBAAjB,EAAsCN,eAAtC,CAAhB;AACH,C,CAED;;AACA,OAAO,UAAUO,SAAV,GAAsB;AAEzB,QAAM/B,GAAG,CAAC,CACNC,IAAI,CAACqB,mBAAD,CADE,EAENrB,IAAI,CAAC4B,kBAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user-types'\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../components/config/firebase/firebase-util'\n\nimport {\n    googleSignInSuccess,\n    googleSignInFailure,\n    emailSignInSuccess,\n    emailSignInFailure\n} from './user-actions'\n\nexport function* signInWithGoogle() {\n\n    try {\n\n        // ? Extract user object from auth object \n        const { user } = yield auth.signInWithPopup(googleProvider);\n        console.log(`###### `, user)\n\n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapShot = yield userRef.get();\n        console.log(`Snapshot :`, userSnapShot)\n        const l = { ...userSnapShot.data() }\n        console.log(l)\n        // ? Use user Data to create action with user Object as payload\n        // ? put sends return object back to redux flow\n        yield put(googleSignInSuccess({\n            id: userSnapShot.id,\n            ...userSnapShot.data()\n        }))\n\n    } catch (error) {\n        yield put(googleSignInFailure(error))\n    }\n\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* signInWithEmail({ payload: { email, password } }) {\n\n    try {\n\n        // ? Extract user object from auth object \n        const { user } = yield auth.signInWithEmailAndPassword(email,password);\n        \n        const userRef = yield call(createUserProfileDocument, user);\n        const userSnapShot = yield userRef.get();\n        console.log(`Snapshot :`, userSnapShot)\n        const l = { ...userSnapShot.data() }\n        console.log(l)\n        // ? Use user Data to create action with user Object as payload\n        // ? put sends return object back to redux flow\n        yield put(emailSignInSuccess({\n            id: userSnapShot.id,\n            ...userSnapShot.data()\n        }))\n\n\n    } catch (error) {\n        yield put(emailSignInFailure(error))\n    }\n\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\n// ? Export Sagas to root rootSaga\nexport function* userSagas() {\n\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ])\n\n}"]},"metadata":{},"sourceType":"module"}