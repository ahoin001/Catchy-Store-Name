{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/cart/cart-icon/cart-icon.jsx\";\nimport React from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { getTotalItems } from '../../../redux/cart-dropdown/selectors/cart-items';\nimport { toggleCartDisplay } from '../../../redux/cart-dropdown/cart-dropdown-actions';\nimport { ReactComponent as ShoppingCartIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/shoppingbag.svg\";\nimport './cart-icon.scss';\n\nconst CartIcon = props => {\n  // ************************************************************\n  // * Started using react-redux hooks instead of connnect\n  // ************************************************************\n  const totalItems = useSelector(state => getTotalItems(state));\n  const dispatch = useDispatch();\n  console.log(\"Cart Icon rendering. (SHOULD ONLY OCCUR AFTER APP STARTS WHEN ADDING OR REMOVING ITEMS< TANKS TO USESELECTOR\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cart-icon\",\n    onClick: () => dispatch(toggleCartDisplay()),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ShoppingCartIcon, {\n    className: \"shopping-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"item-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, totalItems));\n}; // dispatch provided by connect\n// const mapDispatchToProps = dispatch => {\n//     // ? this object will be spread to props\n//     return {\n//         // ? Dispatch excecutes action creator function with user argument and returns the action object for dispatch excecution\n//         toggleCartDropDown: () => dispatch(toggleCartDisplay())\n//     }\n// }\n// ? Deconstruct to get nested property value from state object recieved by connect\n// const mapStateToProps = ({ cartDropDown: { cartItems } }) => {\n//     console.log(`I HAVE BEEN CALLED`)\n//     return {\n//         totalItems: cartItems.reduce((accumulator, currentValue) => {\n//             return accumulator + currentValue.quantity\n//         }, 0)\n//     }\n// }\n\n\nexport default CartIcon;","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/cart/cart-icon/cart-icon.jsx"],"names":["React","connect","useSelector","useDispatch","getTotalItems","toggleCartDisplay","CartIcon","props","totalItems","state","dispatch","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,iBAAT,QAAkC,oDAAlC;;AAIA,OAAO,kBAAP;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAGxB;AACA;AACA;AAEA,QAAMC,UAAU,GAAGN,WAAW,CAAEO,KAAD,IAAWL,aAAa,CAACK,KAAD,CAAzB,CAA9B;AAEA,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAIAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,8GAAZ;AAEA,sBAGI;AACI,IAAA,SAAS,EAAC,WADd;AAEI,IAAA,OAAO,EAAE,MAAMF,QAAQ,CAACL,iBAAiB,EAAlB,CAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,gBAAD;AAAkB,IAAA,SAAS,EAAC,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAMI;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BG,UAA9B,CANJ,CAHJ;AAcH,CA7BD,C,CA+BA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA,eAAeF,QAAf","sourcesContent":["import React from 'react';\n\nimport { connect, useSelector, useDispatch } from 'react-redux'\nimport { getTotalItems } from '../../../redux/cart-dropdown/selectors/cart-items'\nimport { toggleCartDisplay } from '../../../redux/cart-dropdown/cart-dropdown-actions'\n\nimport { ReactComponent as ShoppingCartIcon } from \"../../../assets/shoppingbag.svg\";\n\nimport './cart-icon.scss'\n\nconst CartIcon = (props) => {\n\n\n    // ************************************************************\n    // * Started using react-redux hooks instead of connnect\n    // ************************************************************\n\n    const totalItems = useSelector((state) => getTotalItems(state))\n\n    const dispatch = useDispatch()\n\n\n\n    console.log(\"Cart Icon rendering. (SHOULD ONLY OCCUR AFTER APP STARTS WHEN ADDING OR REMOVING ITEMS< TANKS TO USESELECTOR\");\n\n    return (\n\n\n        <div\n            className=\"cart-icon\"\n            onClick={() => dispatch(toggleCartDisplay())}\n        >\n\n            <ShoppingCartIcon className=\"shopping-icon\" />\n            <span className=\"item-count\">{totalItems}</span>\n\n        </div>\n    );\n\n};\n\n// dispatch provided by connect\n// const mapDispatchToProps = dispatch => {\n\n//     // ? this object will be spread to props\n//     return {\n\n//         // ? Dispatch excecutes action creator function with user argument and returns the action object for dispatch excecution\n//         toggleCartDropDown: () => dispatch(toggleCartDisplay())\n\n//     }\n// }\n\n// ? Deconstruct to get nested property value from state object recieved by connect\n// const mapStateToProps = ({ cartDropDown: { cartItems } }) => {\n//     console.log(`I HAVE BEEN CALLED`)\n//     return {\n//         totalItems: cartItems.reduce((accumulator, currentValue) => {\n//             return accumulator + currentValue.quantity\n//         }, 0)\n//     }\n\n// }\n\nexport default CartIcon;    "]},"metadata":{},"sourceType":"module"}