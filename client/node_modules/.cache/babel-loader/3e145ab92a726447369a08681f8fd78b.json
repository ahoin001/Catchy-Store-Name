{"ast":null,"code":"// import CartItem from \"../../components/cart/cart-item/cart-item\";\nexport const addItemToCart = (cartItems, itemBeingAdded) => {\n  const exsistingCartItem = cartItems.find(cartItem => cartItem.id === itemBeingAdded.id);\n\n  if (exsistingCartItem) {\n    // ? Return updated cartlist\n    return cartItems.map(cartItem => {\n      // ? Return cartItem as object , with Increase qunatity of item\n      return cartItem.id === itemBeingAdded.id ? { ...cartItem,\n        quantity: cartItem.quantity + 1\n      } : cartItem;\n    });\n  } // ? When the function first excecutes and there is no exsisting items, attatch quantity property\n\n\n  return [...cartItems, { ...itemBeingAdded,\n    quantity: 1\n  }];\n};\nexport const removeItemInCheckout = (cartItems, itemBeingRemoved) => {\n  const exsistingCartItem = cartItems.find(cartItem => cartItem.id === itemBeingRemoved.id); // if (exsistingCartItem.quantity === 1) {\n  //     return cartItems.filter(cartItem => cartItem.id !== exsistingCartItem.id)\n  // }\n  // if (exsistingCartItem) {\n  //     return cartItems.map(cartItem => {\n  //         return cartItem.id === itemBeingRemoved.id ?\n  //             { ...cartItem, quantity: cartItem.quantity - 1 } :\n  //             cartItem\n  //     })\n  // }\n\n  if (exsistingCartItem) {\n    return cartItems.reduce((accumulator, currentItem) => {\n      if (exsistingCartItem.quantity === 1) {\n        // Return list without the item\n        if (currentItem.id !== exsistingCartItem.id) {\n          const item = currentItem;\n          accumulator.push(item);\n        }\n      }\n\n      if (exsistingCartItem.quantity > 1) {\n        // Return list with the item with 1 less \n        if (currentItem.id === exsistingCartItem.id) {\n          const item = { ...currentItem,\n            quantity: currentItem.quantity - 1\n          };\n          accumulator.push(item);\n        }\n\n        accumulator.push(currentItem);\n      }\n\n      return accumulator;\n    }, []);\n  }\n};","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/redux/cart-dropdown/cart-util.js"],"names":["addItemToCart","cartItems","itemBeingAdded","exsistingCartItem","find","cartItem","id","map","quantity","removeItemInCheckout","itemBeingRemoved","reduce","accumulator","currentItem","item","push"],"mappings":"AAAA;AAEA,OAAO,MAAMA,aAAa,GAAG,CAACC,SAAD,EAAYC,cAAZ,KAA+B;AAExD,QAAMC,iBAAiB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBJ,cAAc,CAACI,EADrB,CAA1B;;AAIA,MAAIH,iBAAJ,EAAuB;AAEnB;AACA,WAAOF,SAAS,CAACM,GAAV,CAAeF,QAAD,IAAc;AAE/B;AACA,aAAOA,QAAQ,CAACC,EAAT,KAAgBJ,cAAc,CAACI,EAA/B,GACH,EAAE,GAAGD,QAAL;AAAeG,QAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,OADG,GAEHH,QAFJ;AAGH,KANM,CAAP;AAUH,GAnBuD,CAqBxD;;;AACA,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,cAAL;AAAqBM,IAAAA,QAAQ,EAAE;AAA/B,GAAf,CAAP;AAEH,CAxBM;AA2BP,OAAO,MAAMC,oBAAoB,GAAG,CAACR,SAAD,EAAYS,gBAAZ,KAAiC;AAEjE,QAAMP,iBAAiB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBI,gBAAgB,CAACJ,EADvB,CAA1B,CAFiE,CAMjE;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA,MAAIH,iBAAJ,EAAuB;AAEnB,WAAOF,SAAS,CAACU,MAAV,CAAiB,CAACC,WAAD,EAAcC,WAAd,KAA8B;AAElD,UAAIV,iBAAiB,CAACK,QAAlB,KAA+B,CAAnC,EAAsC;AAElC;AACA,YAAIK,WAAW,CAACP,EAAZ,KAAmBH,iBAAiB,CAACG,EAAzC,EAA6C;AACzC,gBAAMQ,IAAI,GAAGD,WAAb;AACAD,UAAAA,WAAW,CAACG,IAAZ,CAAiBD,IAAjB;AACH;AAEJ;;AAED,UAAIX,iBAAiB,CAACK,QAAlB,GAA6B,CAAjC,EAAoC;AAEhC;AACA,YAAIK,WAAW,CAACP,EAAZ,KAAmBH,iBAAiB,CAACG,EAAzC,EAA6C;AACzC,gBAAMQ,IAAI,GAAI,EAAE,GAAGD,WAAL;AAAkBL,YAAAA,QAAQ,EAAEK,WAAW,CAACL,QAAZ,GAAuB;AAAnD,WAAd;AACAI,UAAAA,WAAW,CAACG,IAAZ,CAAiBD,IAAjB;AACH;;AACDF,QAAAA,WAAW,CAACG,IAAZ,CAAiBF,WAAjB;AACH;;AAED,aAAOD,WAAP;AAEH,KAxBM,EA0BD,EA1BC,CAAP;AA4BH;AAGJ,CAvDM","sourcesContent":["// import CartItem from \"../../components/cart/cart-item/cart-item\";\n\nexport const addItemToCart = (cartItems, itemBeingAdded) => {\n\n    const exsistingCartItem = cartItems.find(\n        cartItem => cartItem.id === itemBeingAdded.id\n    );\n\n    if (exsistingCartItem) {\n\n        // ? Return updated cartlist\n        return cartItems.map((cartItem) => {\n\n            // ? Return cartItem as object , with Increase qunatity of item\n            return cartItem.id === itemBeingAdded.id ?\n                { ...cartItem, quantity: cartItem.quantity + 1 } :\n                cartItem\n        }\n\n        )\n\n    }\n\n    // ? When the function first excecutes and there is no exsisting items, attatch quantity property\n    return [...cartItems, { ...itemBeingAdded, quantity: 1 }]\n\n}\n\n\nexport const removeItemInCheckout = (cartItems, itemBeingRemoved) => {\n\n    const exsistingCartItem = cartItems.find(\n        cartItem => cartItem.id === itemBeingRemoved.id\n    );\n\n    // if (exsistingCartItem.quantity === 1) {\n\n    //     return cartItems.filter(cartItem => cartItem.id !== exsistingCartItem.id)\n\n    // }\n\n    // if (exsistingCartItem) {\n    //     return cartItems.map(cartItem => {\n\n    //         return cartItem.id === itemBeingRemoved.id ?\n    //             { ...cartItem, quantity: cartItem.quantity - 1 } :\n    //             cartItem\n\n    //     })\n    // }\n\n    if (exsistingCartItem) {\n\n        return cartItems.reduce((accumulator, currentItem) => {\n\n            if (exsistingCartItem.quantity === 1) {\n\n                // Return list without the item\n                if (currentItem.id !== exsistingCartItem.id) {\n                    const item = currentItem;\n                    accumulator.push(item);\n                }\n\n            }\n\n            if (exsistingCartItem.quantity > 1) {\n\n                // Return list with the item with 1 less \n                if (currentItem.id === exsistingCartItem.id) {\n                    const item =  { ...currentItem, quantity: currentItem.quantity - 1 } \n                    accumulator.push(item);\n                }\n                accumulator.push(currentItem);\n            }\n\n            return accumulator;\n\n        }\n\n            , []);\n\n    }\n\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}