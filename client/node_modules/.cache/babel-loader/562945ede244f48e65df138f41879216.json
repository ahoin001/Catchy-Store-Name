{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/login/DynamicLogin.jsx\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { googleSignInStart } from '../../redux/user/user-actions';\nimport { googleSignIn, auth } from '../config/firebase/firebase-util';\nimport FormInput from '../shared/forminput/FormInput';\nimport './dynamic.scss';\nimport '../shared/button/google-button.scss';\n\nconst Login = () => {\n  const [userInput, setuserInput] = useState({\n    email: '',\n    password: ''\n  });\n  const dispatch = useDispatch();\n\n  const handleSignIn = async event => {\n    event.preventDefault();\n\n    try {\n      // ? Creates user and signs user in, returns object with user key to get user data\n      // ? This saves user in Firebase authentication, but not our database where user data can be used \n      const {\n        user\n      } = await auth.signInWithEmailAndPassword(userInput.email, userInput.password);\n      console.log('User from sign up: ', user);\n    } catch (error) {\n      console.log('Error creation', error);\n    }\n\n    setuserInput({\n      email: '',\n      password: ''\n    });\n    console.log(`CLEARED INPUTS`);\n  };\n\n  const handleUserInput = e => {\n    // ? Name attribute in input allows getting the proper input\n    // console.log(`INPUT NAME: `, e.target.name)\n    // ? Copy UserInput, Then change one property\n    // ? (Will modify not add if new property would have been in spread i.e if target was name, name would not be copied but reeplaced with new value)\n    setuserInput({ ...userInput,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"form sign-in\",\n    onSubmit: handleSignIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Welcome back\"), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    handleChange: handleUserInput,\n    value: userInput.email,\n    label: \"Email\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    handleChange: handleUserInput,\n    value: userInput.password,\n    label: \"Password\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"forgot-pass\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Forgot password?\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"submit\",\n    onClick: handleSignIn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Sign In\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => dispatch(googleSignInStart),\n    type: \"button\",\n    className: \"loginBtn loginBtn--google\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Connect with \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 130\n    }\n  }, \"Google\")));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/login/DynamicLogin.jsx"],"names":["React","useState","useDispatch","googleSignInStart","googleSignIn","auth","FormInput","Login","userInput","setuserInput","email","password","dispatch","handleSignIn","event","preventDefault","user","signInWithEmailAndPassword","console","log","error","handleUserInput","e","target","name","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux'\n\nimport { googleSignInStart } from '../../redux/user/user-actions'\n\nimport { googleSignIn, auth } from '../config/firebase/firebase-util'\nimport FormInput from '../shared/forminput/FormInput'\n\nimport './dynamic.scss'\nimport '../shared/button/google-button.scss'\n\nconst Login = () => {\n\n    const [userInput, setuserInput] = useState({ email: '', password: '' })\n\n    const dispatch = useDispatch()\n\n    const handleSignIn = async (event) => {\n\n        event.preventDefault();\n\n        try {\n            // ? Creates user and signs user in, returns object with user key to get user data\n            // ? This saves user in Firebase authentication, but not our database where user data can be used \n            const { user } = await auth.signInWithEmailAndPassword(userInput.email, userInput.password)\n\n            console.log('User from sign up: ', user)\n\n        } catch (error) {\n            console.log('Error creation', error)\n        }\n\n        setuserInput({ email: '', password: '' })\n        console.log(`CLEARED INPUTS`)\n\n    }\n\n    const handleUserInput = (e) => {\n\n        // ? Name attribute in input allows getting the proper input\n        // console.log(`INPUT NAME: `, e.target.name)\n\n        // ? Copy UserInput, Then change one property\n        // ? (Will modify not add if new property would have been in spread i.e if target was name, name would not be copied but reeplaced with new value)\n        setuserInput(\n            {\n                ...userInput,\n                [e.target.name]: e.target.value,\n            }\n        )\n\n    }\n\n    return (\n\n        <form\n            className=\"form sign-in\"\n            onSubmit={handleSignIn}\n        >\n\n            <h2>Welcome back</h2>\n\n            <FormInput\n                name='email'\n                type='email'\n                handleChange={handleUserInput}\n                value={userInput.email}\n                label='Email'\n                required\n            />\n\n            <FormInput\n                name='password'\n                type='password'\n                handleChange={handleUserInput}\n                value={userInput.password}\n                label='Password'\n                required\n            />\n\n            <p className=\"forgot-pass\">Forgot password?</p>\n            <button type=\"button\" className=\"submit\" onClick={handleSignIn}>Sign In</button>\n            <button onClick={() => dispatch(googleSignInStart)} type=\"button\" className=\"loginBtn loginBtn--google\">Connect with <span>Google</span></button>\n\n        </form>\n\n    );\n\n};\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}