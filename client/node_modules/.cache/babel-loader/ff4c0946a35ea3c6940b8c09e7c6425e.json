{"ast":null,"code":"// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from 'firebase/app'; // Add the Firebase products that you want to use\n\nimport \"firebase/auth\"; // authorization\n\nimport \"firebase/firestore\"; // database\n// Web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBl9ZmTbt226YVEKmxUuyJDfh18NibTvbk\",\n  authDomain: \"diamond-clothing.firebaseapp.com\",\n  databaseURL: \"https://diamond-clothing.firebaseio.com\",\n  projectId: \"diamond-clothing\",\n  storageBucket: \"diamond-clothing.appspot.com\",\n  messagingSenderId: \"390969946473\",\n  appId: \"1:390969946473:web:30cd40e5222176a5394df8\",\n  measurementId: \"G-P2DZVE7MP2\"\n}; // ?Initialize our instance of Firebase\n\nfirebase.initializeApp(firebaseConfig); // ? Save a user to DB\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; // ? Export Libraries for use\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // ? The Google provider class for google auth\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const googleSignIn = () => firebase.auth().signInWithPopup(provider).then(result => {// This gives you a Google Access Token. You can use it to access the Google API.\n  // let token = result.credential.accessToken;\n  // The signed-in user info.\n  // let user = result.user;\n  // ...\n}).catch(function (error) {// Handle Errors here.\n  // let errorCode = error.code;\n  // let errorMessage = error.message;\n  // The email of the user's account used.\n  // let email = error.email;\n  // The firebase.auth.AuthCredential type that was used.\n  // let credential = error.credential;\n  // ...\n});\nexport const signOut = () => {\n  firebase.auth().signOut().then(function () {// Sign-out successful.\n  }).catch(function (error) {// An error happened.\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/config/firebase/firebase-util.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","googleSignIn","signInWithPopup","then","result","catch","signOut"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,cAArB,C,CAEA;;AACA,OAAO,eAAP,C,CAAwB;;AACxB,OAAO,oBAAP,C,CAA6B;AAE7B;;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,kCAFO;AAGnBC,EAAAA,WAAW,EAAE,yCAHM;AAInBC,EAAAA,SAAS,EAAE,kBAJQ;AAKnBC,EAAAA,aAAa,EAAE,8BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB,C,CAWA;;AACAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB,E,CAEA;;AACA,OAAO,MAAMU,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAEzE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAClB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AACdJ,QAAAA,WADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOa,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAK,CAACG,OAAzC;AACH;AACJ;;AAED,SAAOf,OAAP;AAEH,CAzBM,C,CA2BP;;AACA,OAAO,MAAMgB,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMf,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB,C,CAEP;;AACA,MAAMgB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AAEAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAMnC,QAAQ,CAAC8B,IAAT,GAAgBM,eAAhB,CAAgCL,QAAhC,EAC7BM,IAD6B,CACvBC,MAAD,IAAY,CACd;AACA;AACA;AACA;AACA;AACH,CAP6B,EAO3BC,KAP2B,CAOrB,UAAUb,KAAV,EAAiB,CACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAhB6B,CAA3B;AAkBP,OAAO,MAAMc,OAAO,GAAG,MAAM;AACzBxC,EAAAA,QAAQ,CAAC8B,IAAT,GAAgBU,OAAhB,GACKH,IADL,CACU,YAAY,CACd;AACH,GAHL,EAGOE,KAHP,CAGa,UAAUb,KAAV,EAAiB,CACtB;AACH,GALL;AAMH,CAPM;AASP,eAAe1B,QAAf","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from 'firebase/app'\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\"; // authorization\nimport \"firebase/firestore\"; // database\n\n// Web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBl9ZmTbt226YVEKmxUuyJDfh18NibTvbk\",\n    authDomain: \"diamond-clothing.firebaseapp.com\",\n    databaseURL: \"https://diamond-clothing.firebaseio.com\",\n    projectId: \"diamond-clothing\",\n    storageBucket: \"diamond-clothing.appspot.com\",\n    messagingSenderId: \"390969946473\",\n    appId: \"1:390969946473:web:30cd40e5222176a5394df8\",\n    measurementId: \"G-P2DZVE7MP2\"\n};\n\n// ?Initialize our instance of Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// ? Save a user to DB\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\n    if (!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapShot = await userRef.get();\n\n    if (!snapShot.exists) {\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n        try {\n            await userRef.set({\n                displayName,\n                email,\n                createdAt,\n                ...additionalData\n            });\n        } catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n\n    return userRef;\n\n};\n\n// ? Export Libraries for use\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore();\n\n// ? The Google provider class for google auth\nconst provider = new firebase.auth.GoogleAuthProvider();\n\nprovider.setCustomParameters({ prompt: 'select_account' })\n\nexport const googleSignIn = () => firebase.auth().signInWithPopup(provider)\n    .then((result) => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        // let token = result.credential.accessToken;\n        // The signed-in user info.\n        // let user = result.user;\n        // ...\n    }).catch(function (error) {\n        // Handle Errors here.\n        // let errorCode = error.code;\n        // let errorMessage = error.message;\n        // The email of the user's account used.\n        // let email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        // let credential = error.credential;\n        // ...\n    });\n\nexport const signOut = () => {\n    firebase.auth().signOut()\n        .then(function () {\n            // Sign-out successful.\n        }).catch(function (error) {\n            // An error happened.\n        });\n}\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}