{"ast":null,"code":"// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from 'firebase/app'; // Add the Firebase products that you want to use\n\nimport \"firebase/auth\"; // authorization\n\nimport \"firebase/firestore\"; // database\n// Web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBl9ZmTbt226YVEKmxUuyJDfh18NibTvbk\",\n  authDomain: \"diamond-clothing.firebaseapp.com\",\n  databaseURL: \"https://diamond-clothing.firebaseio.com\",\n  projectId: \"diamond-clothing\",\n  storageBucket: \"diamond-clothing.appspot.com\",\n  messagingSenderId: \"390969946473\",\n  appId: \"1:390969946473:web:30cd40e5222176a5394df8\",\n  measurementId: \"G-P2DZVE7MP2\"\n}; // ?Initialize our instance of Firebase\n\nfirebase.initializeApp(firebaseConfig); // ? Export Libraries for use\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // ? Both retrieve the same doc \n// firestore.collection('users'.doc('someDocumentId'))\n// firestore.doc('/users/someDocumentId/')\n// ? Save a user to DB as document using user data from auth\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // ? Create user in database with ID provided by user from auth (auth has it's own cloud of signed in users)\n  // ? Returns document for manipulation\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n  console.log(`SNAPSHOT OF USR AFTER DOC CREATED BEFORE GETTING DOC DATA`, !!snapShot);\n\n  if (!snapShot.exists) {\n    // ? If user does\n    const {\n      name,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        name,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n}; // ? The Google provider class for google auth\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const googleSignIn = () => firebase.auth().signInWithPopup(provider).then(result => {// This gives you a Google Access Token. You can use it to access the Google API.\n  // let token = result.credential.accessToken;\n  // The signed-in user info.\n  // let user = result.user;\n  // ...\n}).catch(function (error) {// Handle Errors here.\n  // let errorCode = error.code;\n  // let errorMessage = error.message;\n  // The email of the user's account used.\n  // let email = error.email;\n  // The firebase.auth.AuthCredential type that was used.\n  // let credential = error.credential;\n  // ...\n});\nexport const signOut = () => {\n  firebase.auth().signOut().then(function () {// Sign-out successful.\n  }).catch(function (error) {// An error happened.\n  });\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/config/firebase/firebase-util.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","console","log","exists","name","email","createdAt","Date","set","error","message","provider","GoogleAuthProvider","setCustomParameters","prompt","googleSignIn","signInWithPopup","then","result","catch","signOut"],"mappings":"AAAA;AACA,OAAOA,QAAP,MAAqB,cAArB,C,CAEA;;AACA,OAAO,eAAP,C,CAAwB;;AACxB,OAAO,oBAAP,C,CAA6B;AAE7B;;AACA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,kCAFO;AAGnBC,EAAAA,WAAW,EAAE,yCAHM;AAInBC,EAAAA,SAAS,EAAE,kBAJQ;AAKnBC,EAAAA,aAAa,EAAE,8BALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB,C,CAWA;;AACAT,QAAQ,CAACU,aAAT,CAAuBT,cAAvB,E,CAEA;;AACA,OAAO,MAAMU,IAAI,GAAGX,QAAQ,CAACW,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB,C,CAEP;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAEzE,MAAI,CAACD,QAAL,EAAe,OAF0D,CAIzE;AACA;;AACA,QAAME,OAAO,GAAGJ,SAAS,CAACK,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAR,EAAvB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAa,2DAAb,EAAwE,CAAC,CAACH,QAA1E;;AAEA,MAAI,CAACA,QAAQ,CAACI,MAAd,EAAsB;AAElB;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBX,QAAxB;AACA,UAAMY,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACA,YAAMX,OAAO,CAACY,GAAR,CAAY;AACdJ,QAAAA,IADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,SAHc;AAId,WAAGX;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOc,KAAP,EAAc;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCO,KAAK,CAACC,OAAzC;AACH;AACJ;;AAED,SAAOd,OAAP;AAEH,CA/BM,C,CAiCP;;AACA,MAAMe,QAAQ,GAAG,IAAI/B,QAAQ,CAACW,IAAT,CAAcqB,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AAGA,OAAO,MAAMC,YAAY,GAAG,MAAMnC,QAAQ,CAACW,IAAT,GAAgByB,eAAhB,CAAgCL,QAAhC,EAC7BM,IAD6B,CACvBC,MAAD,IAAY,CACd;AACA;AACA;AACA;AACA;AACH,CAP6B,EAO3BC,KAP2B,CAOrB,UAAUV,KAAV,EAAiB,CACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAhB6B,CAA3B;AAkBP,OAAO,MAAMW,OAAO,GAAG,MAAM;AACzBxC,EAAAA,QAAQ,CAACW,IAAT,GAAgB6B,OAAhB,GACKH,IADL,CACU,YAAY,CACd;AACH,GAHL,EAGOE,KAHP,CAGa,UAAUV,KAAV,EAAiB,CACtB;AACH,GALL;AAMH,CAPM;AASP,eAAe7B,QAAf","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from 'firebase/app'\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\"; // authorization\nimport \"firebase/firestore\"; // database\n\n// Web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBl9ZmTbt226YVEKmxUuyJDfh18NibTvbk\",\n    authDomain: \"diamond-clothing.firebaseapp.com\",\n    databaseURL: \"https://diamond-clothing.firebaseio.com\",\n    projectId: \"diamond-clothing\",\n    storageBucket: \"diamond-clothing.appspot.com\",\n    messagingSenderId: \"390969946473\",\n    appId: \"1:390969946473:web:30cd40e5222176a5394df8\",\n    measurementId: \"G-P2DZVE7MP2\"\n};\n\n// ?Initialize our instance of Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// ? Export Libraries for use\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore();\n\n// ? Both retrieve the same doc \n// firestore.collection('users'.doc('someDocumentId'))\n// firestore.doc('/users/someDocumentId/')\n\n// ? Save a user to DB as document using user data from auth\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\n    if (!userAuth) return;\n\n    // ? Create user in database with ID provided by user from auth (auth has it's own cloud of signed in users)\n    // ? Returns document for manipulation\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapShot = await userRef.get();\n    console.log(`SNAPSHOT OF USR AFTER DOC CREATED BEFORE GETTING DOC DATA`,!!snapShot)\n\n    if (!snapShot.exists) {\n\n        // ? If user does\n        const { name, email } = userAuth;\n        const createdAt = new Date();\n        \n        try {\n            await userRef.set({\n                name,\n                email,\n                createdAt,\n                ...additionalData\n            });\n        } catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n\n    return userRef;\n\n};\n\n// ? The Google provider class for google auth\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' })\n\n\nexport const googleSignIn = () => firebase.auth().signInWithPopup(provider)\n    .then((result) => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        // let token = result.credential.accessToken;\n        // The signed-in user info.\n        // let user = result.user;\n        // ...\n    }).catch(function (error) {\n        // Handle Errors here.\n        // let errorCode = error.code;\n        // let errorMessage = error.message;\n        // The email of the user's account used.\n        // let email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        // let credential = error.credential;\n        // ...\n    });\n\nexport const signOut = () => {\n    firebase.auth().signOut()\n        .then(function () {\n            // Sign-out successful.\n        }).catch(function (error) {\n            // An error happened.\n        });\n}\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}