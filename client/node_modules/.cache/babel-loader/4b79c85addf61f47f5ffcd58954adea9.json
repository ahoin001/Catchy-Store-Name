{"ast":null,"code":"// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from 'firebase/app'; // Add the Firebase products that you want to use\n\nimport \"firebase/auth\"; // authorization\n\nimport \"firebase/firestore\"; // database\n// Web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBl9ZmTbt226YVEKmxUuyJDfh18NibTvbk\",\n  authDomain: \"diamond-clothing.firebaseapp.com\",\n  databaseURL: \"https://diamond-clothing.firebaseio.com\",\n  projectId: \"diamond-clothing\",\n  storageBucket: \"diamond-clothing.appspot.com\",\n  messagingSenderId: \"390969946473\",\n  appId: \"1:390969946473:web:30cd40e5222176a5394df8\",\n  measurementId: \"G-P2DZVE7MP2\"\n}; // ? Initialize our instance of Firebase\n\nfirebase.initializeApp(firebaseConfig); // ? Export Libraries for use\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // ? Both point to same doc location\n// firestore.collection('users'.doc('someDocumentId'))\n// firestore.doc('/users/someDocumentId/')\n// ? Save a user to DB as document using user data from auth\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  }\n\n  ; // ? Get query reference object from FIrebase at locatoion to get snapshot\n  // ? Reference will ALWAYS return something even if nothing exsists, use snap to make sure something exsists \n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get(); // ? Use snapshot to check if anything exsists in this location, create a document if not\n\n  if (!snapShot.exists) {\n    // ? Provide user data for the doc from the user provided in argument\n    const {\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // ? Use document refrence for CRUD operations (create in this case)\n      await userRef.set({\n        email,\n        createdAt,\n        ...additionalData // name\n\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  } // ? Return userRef in case more changes are wanted to be made\n\n\n  return userRef;\n}; // ? The Google provider class for google auth\n\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const googleSignIn = () => firebase.auth().signInWithPopup(googleProvider).then(result => {// This gives you a Google Access Token. You can use it to access the Google API.\n  // let token = result.credential.accessToken;\n  // The signed-in user info.\n  // let user = result.user;\n  // ...\n}).catch(function (error) {// Handle Errors here.\n  // let errorCode = error.code;\n  // let errorMessage = error.message;\n  // The email of the user's account used.\n  // let email = error.email;\n  // The firebase.auth.AuthCredential type that was used.\n  // let credential = error.credential;\n  // ...\n});\nexport const signOut = () => {\n  firebase.auth().signOut().then(function () {// Sign-out successful.\n  }).catch(function (error) {// An error happened.\n  });\n}; // ? Convert a collection to hash map\n\nexport const convertCollectionSnapShotToMap = collectionSnapshotObject => {\n  // ? Maps over array of docs in collection snapshot and returns object with desired data for use\n  const transformedCollection = collectionSnapshotObject.docs.map(document => {\n    // ? Extract data from document\n    const {\n      title,\n      items\n    } = document.data(); // ? Return Data from document after adding route and id of object \n\n    return {\n      // ? encode for routes\n      routeName: encodeURI(title.toLowerCase()),\n      id: document.id,\n      title,\n      items\n    };\n  }); // ? Returns hash map from array of documents ex. {hats: {hatsCollectionobject} }\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection; // console.log(`ACCUMULATOR ******** `,accumulator)\n\n    return accumulator;\n  }, {});\n};\nexport const addCollectionAndDocumentss = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); // Create Batch instance\n\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // ? Create new docReference Objects for each key in object (Creates UniqueId if doc() empty)\n    const newDocRef = collectionRef.doc(); // ? batch all set operations that will be done on eaach key\n\n    batch.set(newDocRef, obj);\n  });\n  await batch.commit();\n};\nexport default firebase;","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/components/config/firebase/firebase-util.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapShot","get","exists","email","createdAt","Date","set","error","console","log","message","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","googleSignIn","signInWithPopup","then","result","catch","signOut","convertCollectionSnapShotToMap","collectionSnapshotObject","transformedCollection","docs","map","document","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","collection","addCollectionAndDocumentss","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit"],"mappings":"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","sourcesContent":["// Firebase App (the core Firebase SDK) is always required and must be listed first\nimport firebase from 'firebase/app'\n\n// Add the Firebase products that you want to use\nimport \"firebase/auth\"; // authorization\nimport \"firebase/firestore\"; // database\n\n// Web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBl9ZmTbt226YVEKmxUuyJDfh18NibTvbk\",\n    authDomain: \"diamond-clothing.firebaseapp.com\",\n    databaseURL: \"https://diamond-clothing.firebaseio.com\",\n    projectId: \"diamond-clothing\",\n    storageBucket: \"diamond-clothing.appspot.com\",\n    messagingSenderId: \"390969946473\",\n    appId: \"1:390969946473:web:30cd40e5222176a5394df8\",\n    measurementId: \"G-P2DZVE7MP2\"\n};\n\n// ? Initialize our instance of Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// ? Export Libraries for use\nexport const auth = firebase.auth()\nexport const firestore = firebase.firestore();\n\n// ? Both point to same doc location\n// firestore.collection('users'.doc('someDocumentId'))\n// firestore.doc('/users/someDocumentId/')\n\n// ? Save a user to DB as document using user data from auth\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n\n    if (!userAuth) {\n        return\n    };\n\n    // ? Get query reference object from FIrebase at locatoion to get snapshot\n    // ? Reference will ALWAYS return something even if nothing exsists, use snap to make sure something exsists \n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n\n    const snapShot = await userRef.get();\n\n\n    // ? Use snapshot to check if anything exsists in this location, create a document if not\n    if (!snapShot.exists) {\n\n        // ? Provide user data for the doc from the user provided in argument\n        const { email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            // ? Use document refrence for CRUD operations (create in this case)\n            await userRef.set({\n                email,\n                createdAt,\n                ...additionalData // name\n            });\n        } catch (error) {\n            console.log('error creating user', error.message);\n        }\n    }\n\n    // ? Return userRef in case more changes are wanted to be made\n    return userRef;\n\n};\n\n// ? The Google provider class for google auth\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({ prompt: 'select_account' })\n\n\nexport const googleSignIn = () => firebase.auth().signInWithPopup(googleProvider)\n    .then((result) => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        // let token = result.credential.accessToken;\n        // The signed-in user info.\n        // let user = result.user;\n        // ...\n    }).catch(function (error) {\n        // Handle Errors here.\n        // let errorCode = error.code;\n        // let errorMessage = error.message;\n        // The email of the user's account used.\n        // let email = error.email;\n        // The firebase.auth.AuthCredential type that was used.\n        // let credential = error.credential;\n        // ...\n    });\n\nexport const signOut = () => {\n    firebase.auth().signOut()\n        .then(function () {\n            // Sign-out successful.\n        }).catch(function (error) {\n            // An error happened.\n        });\n}\n\n// ? Convert a collection to hash map\nexport const convertCollectionSnapShotToMap = (collectionSnapshotObject) => {\n\n    // ? Maps over array of docs in collection snapshot and returns object with desired data for use\n    const transformedCollection = collectionSnapshotObject.docs.map((document) => {\n\n        // ? Extract data from document\n        const { title, items } = document.data();\n   \n        // ? Return Data from document after adding route and id of object \n        return {\n            // ? encode for routes\n            routeName: encodeURI(title.toLowerCase()),\n            id: document.id,\n            title,\n            items\n        }\n\n    })\n\n    // ? Returns hash map from array of documents ex. {hats: {hatsCollectionobject} }\n    return transformedCollection.reduce((accumulator, collection) => {\n\n        accumulator[collection.title.toLowerCase()] = collection;\n        // console.log(`ACCUMULATOR ******** `,accumulator)\n        return accumulator;\n\n    }, {}\n    )\n\n}\n\nexport const addCollectionAndDocumentss = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey)\n\n    // Create Batch instance\n    const batch = firestore.batch();\n\n    objectsToAdd.forEach(obj => {\n\n        // ? Create new docReference Objects for each key in object (Creates UniqueId if doc() empty)\n        const newDocRef = collectionRef.doc()\n\n        // ? batch all set operations that will be done on eaach key\n        batch.set(newDocRef, obj)\n\n    })\n\n    await batch.commit()\n\n}\n\nexport default firebase"]},"metadata":{},"sourceType":"module"}