{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user-types';\nimport { getCurrentUser } from '../../components/config/firebase/firebase-util';\nimport { auth, googleProvider, createUserProfileDocument } from '../../components/config/firebase/firebase-util';\nimport { signInSuccess, signInFailure } from './user-actions';\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithGoogle() {\n  try {\n    // ? Extract user auth object from auth sign in \n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    console.log(`###### `, user);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // ? Watcher Saga\n\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // ? Extract user auth object from auth sign in \n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // ? Export Sagas to root rootSaga\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n} // Helper\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapShot = yield userRef.get(); // ? Use user Data to create action with user Object as payload\n    // ? put sends return object back to redux flow\n\n    yield put(signInSuccess({\n      id: userSnapShot.id,\n      ...userSnapShot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}","map":{"version":3,"sources":["/Users/alexanderhoinville/Desktop/GitHub/ecommerce/src/redux/user/user-sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","getCurrentUser","auth","googleProvider","createUserProfileDocument","signInSuccess","signInFailure","onCheckUserSession","CHECK_USER_SESSION","isUserAuthenticated","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithEmail","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","user","signInWithPopup","console","log","getSnapshotFromUserAuth","error","payload","email","password","signInWithEmailAndPassword","userAuth","userSagas","userRef","userSnapShot","get","id","data"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,cAAT,QAA+B,gDAA/B;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,gDAAhE;AAEA,SACIC,aADJ,EAEIC,aAFJ,QAGO,gBAHP;AAKA,OAAO,UAAUC,kBAAV,GAA+B;AAClC,QAAMX,UAAU,CAACI,eAAe,CAACQ,kBAAjB,EAAqCC,mBAArC,CAAhB;AACH;AAED,OAAO,UAAUC,kBAAV,GAA+B;AAClC,QAAMd,UAAU,CAACI,eAAe,CAACW,mBAAjB,EAAsCC,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,QAAMjB,UAAU,CAACI,eAAe,CAACc,oBAAjB,EAAuCC,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUA,gBAAV,GAA6B;AAEhC,MAAI;AAEA;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACe,eAAL,CAAqBd,cAArB,CAAvB;AACAe,IAAAA,OAAO,CAACC,GAAR,CAAa,SAAb,EAAuBH,IAAvB;AAEA,UAAMI,uBAAuB,CAACJ,IAAD,CAA7B;AAEH,GARD,CAQE,OAAOK,KAAP,EAAc;AACZ,UAAMxB,GAAG,CAACS,aAAa,CAACe,KAAD,CAAd,CAAT;AACH;AAEJ,C,CAED;;AACA,OAAO,UAAUT,eAAV,CAA0B;AAAEU,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AAE/D,MAAI;AAEA;AACA,UAAM;AAAER,MAAAA;AAAF,QAAW,MAAMd,IAAI,CAACuB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMJ,uBAAuB,CAACJ,IAAD,CAA7B;AAGH,GAPD,CAOE,OAAOK,KAAP,EAAc;AACZ,UAAMxB,GAAG,CAACS,aAAa,CAACe,KAAD,CAAd,CAAT;AACH;AAEJ;AAED,OAAO,UAAUZ,mBAAV,GAAgC;AAEnC,MAAI;AAEA,UAAMiB,QAAQ,GAAG,MAAMzB,cAAc,EAArC;AACA,QAAI,CAACyB,QAAL,EAAe;AACf,UAAMN,uBAAuB,CAACM,QAAD,CAA7B;AAGH,GAPD,CAOE,OAAOL,KAAP,EAAc;AACZ,UAAMxB,GAAG,CAACS,aAAa,CAACe,KAAD,CAAd,CAAT;AACH;AAEJ,C,CAED;;AACA,OAAO,UAAUM,SAAV,GAAsB;AAEzB,QAAM7B,GAAG,CAAC,CACNC,IAAI,CAACc,mBAAD,CADE,EAENd,IAAI,CAACW,kBAAD,CAFE,EAGNX,IAAI,CAACQ,kBAAD,CAHE,CAAD,CAAT;AAMH,C,CAED;;AACA,OAAO,UAAUa,uBAAV,CAAkCM,QAAlC,EAA4C;AAE/C,MAAI;AAEA,UAAME,OAAO,GAAG,MAAM7B,IAAI,CAACK,yBAAD,EAA4BsB,QAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAHA,CAKA;AACA;;AACA,UAAMjC,GAAG,CAACQ,aAAa,CAAC;AACpB0B,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAKH,GAZD,CAYE,OAAOX,KAAP,EAAc;AACZ,UAAMxB,GAAG,CAACS,aAAa,CAACe,KAAD,CAAd,CAAT;AACH;AAEJ","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects'\n\nimport UserActionTypes from './user-types'\nimport { getCurrentUser } from '../../components/config/firebase/firebase-util'\n\nimport { auth, googleProvider, createUserProfileDocument } from '../../components/config/firebase/firebase-util'\n\nimport {\n    signInSuccess,\n    signInFailure\n} from './user-actions'\n\nexport function* onCheckUserSession() {\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onEmailSignInStart() {\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\n}\n\nexport function* onGoogleSignInStart() {\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* signInWithGoogle() {\n\n    try {\n\n        // ? Extract user auth object from auth sign in \n        const { user } = yield auth.signInWithPopup(googleProvider);\n        console.log(`###### `, user)\n\n        yield getSnapshotFromUserAuth(user)\n\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n\n}\n\n// ? Watcher Saga\nexport function* signInWithEmail({ payload: { email, password } }) {\n\n    try {\n\n        // ? Extract user auth object from auth sign in \n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user)\n\n\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n\n}\n\nexport function* isUserAuthenticated() {\n\n    try {\n\n        const userAuth = yield getCurrentUser()\n        if (!userAuth) return;\n        yield getSnapshotFromUserAuth(userAuth)\n\n\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n\n}\n\n// ? Export Sagas to root rootSaga\nexport function* userSagas() {\n\n    yield all([\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onCheckUserSession)\n    ])\n\n}\n\n// Helper\nexport function* getSnapshotFromUserAuth(userAuth) {\n\n    try {\n\n        const userRef = yield call(createUserProfileDocument, userAuth);\n        const userSnapShot = yield userRef.get();\n\n        // ? Use user Data to create action with user Object as payload\n        // ? put sends return object back to redux flow\n        yield put(signInSuccess({\n            id: userSnapShot.id,\n            ...userSnapShot.data()\n        }))\n\n    } catch (error) {\n        yield put(signInFailure(error))\n    }\n\n}\n"]},"metadata":{},"sourceType":"module"}